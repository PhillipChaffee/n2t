// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aInstruction);
    Mux16(a=aluOut, b=instruction[0..15], sel=aInstruction, out=registerAValue);
    Or(a=aInstruction, b=instruction[5], out=loadRegisterA);
    ARegister(in=registerAValue, load=loadRegisterA, out[0..15]=registerAOut, out[0..14]=addressM);
    Mux16(a[0..15]=registerAOut, b=inM[0..15], sel=instruction[12], out=aOrMemory);
    And(a=instruction[15], b= instruction[4], out =loadRegisterD);
    DRegister(in=aluOut, load=loadRegisterD, out=registerDOut);
    ALU(x[0..15]=registerDOut, y[0..15]=aOrMemory, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM[0..15], zr=aluOutZero, ng=aluOutNegative);
    And(a=instruction[15], b=instruction[3], out=writeM);
    Or(a=aluOutZero, b=aluOutNegative, out=aluOutNotPositive);
    Not(in=aluOutNotPositive, out=aluOutPositive);
    And(a=instruction[2], b=aluOutNegative, out=jump1);
    And(a=instruction[1], b=aluOutZero, out=jump2);
    And(a=instruction[0], b=aluOutPositive, out=jump3);
    Or(a=jump1, b=jump2, out=jumpA);
    Or(a=jumpA, b=jump3, out=jumpC);
    And(a=jumpC, b=instruction[15], out=jump);
    Or(a=jump, b=reset, out=dontIncrement);
    Not(in=dontIncrement, out=increment);
    PC(in[0..15]=registerAOut, reset=reset, load=jump, inc=increment, out[0..14]=pc[0..14]);
}
